# -*- coding: utf-8 -*-
"""Encapsulation,Inheritance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YuI4SHulFxDA7v3yTeT1yt-xqpBmNNVO
"""

class Animal():
    def __init__(self, type, number_legs, sound):
        self.type = type
        self.number_legs = number_legs
        self.sound = sound

    def make_sound(self):
        print(f"I am an animal, and I love saying {self.sound}")

class Dog(Animal):
    pass

rex= Dog("dog", 4, "wouaf")
print('This animal is a:', rex.type)
# >> This animal is a dog

print('This dog has', rex.number_legs , ' legs')
# >> This dog has 4 legs

print('This dog makes the sound ', rex.sound)
# >> This dog makes the sound wouaf

rex.make_sound()
# >> I am an animal, and I love saying wouaf

class Animal():
    def __init__(self, type, number_legs, sound):
        self.type = type
        self.number_legs = number_legs
        self.sound = sound

    def print_info(self):
        print(f"This animal is a {self.type}")
        print(f"This animal has {self.number_legs} legs")
        print(f"This animal makes the sound {self.sound}")

    def make_sound(self):
        print(f"I am an animal, and I love saying {self.sound}")

class Dog(Animal):
    def __init__(self,type, number_legs, sound,breed):
        super().__init__(type, number_legs, sound)
        self.breed = breed

    def print_info(self):
        super().print_info()
        print(f"This dog is a {self.breed}")

    def fetch_ball(self):
        print("I am a dog, and I love fetching balls")

rex = Dog('dog', 4, "Wouaf", "german shepherd")
print('This animal is a:', rex.type)
print('This animal is a:', rex.breed)
# >> This animal is a dog

rex.fetch_ball()
rex.print_info()
# >> I am a dog, and I love fetching balls

# roger = Animal('Roger', 4, "Grr")
# roger.fetch_ball()
# >> AttributeError: 'Animal' object has no attribute 'fetch_ball'

class Circle:
    color = "red"

class NewCircle(Circle):
    color = "blue"

nc = NewCircle
print(nc.color)
NewCircle.color = "yellow"
print(nc.color)
#an instance attribute will be initiated in the init function
#a class attribute can be initiated outside of the init

class Dog_golden:
  species = "Golden retriever"
  number_of_dogs = 0
  def __init__(self, name, age):
    self.name = name
    self.age = age
    Dog_golden.number_of_dogs += 1

dog1 = Dog_golden("Buddy", 5)
dog1 = Dog_golden("Buddy", 5)
dog3 = Dog_golden("Charlie", 7)
print(dog1.name)

print(dog1.species)

print(Dog_golden.species)

print(Dog_golden.number_of_dogs)

class Circle:
    color = "red"
    print(color)

class NewCircle(Circle):
    pass

nc = NewCircle
print(nc.color)

class Circle:
    def __init__(self, diameter):
      self.diameter = diameter

    def grow(self, factor=2):
        """grows the circle's diameter by factor"""
        self.diameter = self.diameter * factor

class NewCircle(Circle):
    def grow(self, factor=2):
        """grows the area by factor..."""
        self.diameter = (self.diameter * factor * 2)

nc = Circle(1)
print(nc.diameter)

nc.grow()

print(nc.diameter)

class Animal():
    def __init__(self, type, number_legs, sound):
        self.type = type
        self.number_legs = number_legs
        self.sound = sound

    def make_sound(self):
        print(f"I am an animal, and I love saying {self.sound}")

class Dog(Animal):
    def fetch_ball(self):
        print("I am a dog, and I love fetching balls")

    def make_sound(self):
        super().make_sound()
        print("I am an DOGGG !!! WOUAFFF!!")

rex = Dog('dog', 4, "Wouaf")
rex.make_sound()

class MyClass(object):
    def func(self,x):
        print(f"I'm being called from the Parent class {x}")


class ChildClass(MyClass):
    def func(self):
        print("I'm actually being called from the Child class")
        print("But...")
        x=5
        # Calling the `func()` method from the Parent class.
        super(ChildClass, self).func()

my_instance_2 = ChildClass()
my_instance_2.func()

# Base class
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def start(self):
        print(f"{self.make} {self.model} is starting.")

    def stop(self):
        print(f"{self.make} {self.model} is stopping.")

# Derived class: Car
class Car(Vehicle):
    def __init__(self, make, model, number_of_doors):
        super().__init__(make, model)
        self.number_of_doors = number_of_doors

    def open_trunk(self):
        print(f"Opening the trunk of the {self.make} {self.model}.")

# Derived class: Motorcycle
class Motorcycle(Vehicle):
    def __init__(self, make, model, has_sidecar):
        super().__init__(make, model)
        self.has_sidecar = has_sidecar

    def pop_wheelie(self):
        print(f"{self.make} {self.model} is popping a wheelie!")

# Creating a Car instance
car = Car("Toyota", "Corolla", 4)
car.start()           # Output: Toyota Corolla is starting.
car.open_trunk()      # Output: Opening the trunk of the Toyota Corolla.
car.stop()            # Output: Toyota Corolla is stopping.

# Creating a Motorcycle instance
motorcycle = Motorcycle("Harley-Davidson", "Street 750", False)
motorcycle.start()    # Output: Harley-Davidson Street 750 is starting.
motorcycle.pop_wheelie()  # Output: Harley-Davidson Street 750 is popping a wheelie!
motorcycle.stop()     # Output: Harley-Davidson Street 750 is stopping.

class Door:
  def __init__(self, is_opened =False):
    self.is_opened = is_opened

  def open(self):
    if not self.is_opened:
      self.is_opened = True
      print("the door is open")
    else:
      print("the door is already open")

  def close(self):
    if self.is_opened:
      self.is_opened = False
      print("the door is closed")
    else:
      print("the door is already closed")

class BlockedDoor(Door):
    def open(self):
        x=5
        y=x/0
    def close(self):
        raise Exception("A blocked door cannot be closed")

try:
    door = Door()
    door.open()
    door.close()
    door = BlockedDoor()
    door.open()
except Exception as a:
    print(a)
    print("the door is blocked")

class Computer():

    def __init__(self):
        self.name = "Apple Computer" # public
        self._max_price = 900 # private

    def sell(self):            # public method
        print(f"Selling Price: {self._max_price}")
        self._sell()

    def _sell(self):          # private method
      print('This is private method')

    def set_max_price(self, price):#setter
        self._max_price = price
    def get_max_price(self):#getter
        return self._max_price


c = Computer()
c.sell()
c = Computer()
c.set_max_price(1000)

print(c._max_price)

from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def move(self):
        pass

class Fish(Animal):
    def move(self):
        return "Swims"

class Bird(Animal):
    def move(self):
        return "Flies"

class Human(Animal):
    def move(self):
        return "Walks"

class Animal:
    def speak(self):
        print("Animal speaks")

class Dog(Animal):
    def speak(self):
        print("Dog barks")

class Cat(Animal):
    def speak(self):
        print("Cat meows")

def animal_sound(animal):
    animal.speak()

dog = Dog()
Cat = Cat()
animal_sound(dog)
animal_sound(Cat)

x=5
y=7
print(x+y)

x="5"
y="7"
print(x+y)

class Alien():
    def __init__(self, name, planet):
        self.name = name
        self.planet = planet

    def fly(self):
        print(self.name, 'is flying!')

    def sleep(self):
        print("Aliens don't sleep")

class Animal():
    def __init__(self, name):
        self.name = name

    def sleep(self):
        print("zzzZZZZZ")

class Dog(Animal):
    def bark(self):
        print("{} barked, WAF !".format(self.name))

class AlienDog(Dog,Alien):
    def bark(self):
        print("{} barked, 0ul10ul0u (that's how aliens dogs bark..) !".format(self.name))


my_normal_dog = Dog("Roger")
my_normal_dog.sleep()
# >> zzzZZZZZ

my_normal_dog.bark()
# >> Roger barked, WAF !

my_alien_dog = AlienDog("Rex")

# >> Neptune

my_alien_dog.fly()
# >> Rex is flying!

my_alien_dog.sleep()
# >> Aliens don't sleep

my_alien_dog.bark()
# >> Re

class A():

    def dothis(self):
        print("doing this in A")


class B(A):
    pass


class C():
    def dothis(self):
        print("doing this in C")


class D(C, B):
    pass

d_instance = D()
d_instance.dothis1()